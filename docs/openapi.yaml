openapi: "3.0.0"
info:
  version: 1.0.0
  title: DPT
  license:
    name: MIT
servers:
  - url: http://127.0.0.1/v1
paths:
  /sign-up/:
    post:
      requestBody:
        description: Sign up form
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUp"
      responses:
        '200':
          description: Sign up sucessfull
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /dialogs:
    get:
      summary: List all dialogs
      operationId: listDialogs
      tags:
        - dialogs
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of dialogs
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Dialogs"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a dialog
      operationId: createDialogs
      tags:
        - dialogs
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dialogs/{dialogId}:
    get:
      summary: Info for a specific dialog
      operationId: showDialogById
      tags:
        - dialogs
      parameters:
        - name: dialogId
          in: path
          required: true
          description: The id of the dialog to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dialogs"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of users
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a user
      operationId: createUsers
      tags:
        - users
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      summary: Info for a specific user
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /statments:
    get:
      summary: List all statments
      operationId: listStatments
      tags:
        - statments
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of statments
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Statments"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a statment
      operationId: createStatments
      tags:
        - statments
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /statments/{statmentId}:
    get:
      summary: Info for a specific statment
      operationId: showStatmentById
      tags:
        - statments
      parameters:
        - name: statmentId
          in: path
          required: true
          description: The id of the statment to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statments"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Dialog:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Dialogs:
      type: array
      items:
        $ref: "#/components/schemas/Dialog"
    User:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Statment:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Statments:
      type: array
      items:
        $ref: "#/components/schemas/Statment"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Proof:
      required:
        - nonce
        - mac
      properties:
        nonce:
          type: string
          pattern: "^[a-zA-Z0-9]{32}$"
        mac:
          type: string
          pattern: "^[a-zA-Z0-9]{64}$"
    SignUp:
      required:
        - message
        - proof
      properties:
        message:
          properties:
            id:
              type: string
              pattern: "^[a-zA-Z0-9]{64}$"
        proof:
          $ref: "#/components/schemas/Proof"
